@page
@model VegApp.Pages.CompareEatenRecommendedModel
@{
    ViewData["Title"] = "Results";


}


<div>
    <h5>You ate @String.Format("{0:#,##0.00}", Model.DailyProteins) grams of proteins. Regarding your age and gender it is recommended @String.Format("{0:#,##0.00}", Model.Recommendation.Proteins) grams. </h5>
    <h5>You ate @String.Format("{0:#,##0.00}", Model.DailyCarbs) grams of carbs. Regarding your age and gender it is recommended @String.Format("{0:#,##0.00}", Model.Recommendation.Carbs) grams.</h5>
    <h5>You ate @String.Format("{0:#,##0.00}", Model.DailyFats) grams of fats. Regarding your age and gender it is recommended @String.Format("{0:#,##0.00}", Model.Recommendation.Fats) grams.</h5>
    <h5>You consumed @String.Format("{0:#,##0.00}", Model.DailyCalories) calories. Regarding your age and gender it is recommended to consume @String.Format("{0:#,##0.00}", Model.Recommendation.Calories) calories.</h5>
</div>


<div class="chart-container" width="600" height="400">
    <canvas id="myChart"></canvas>
    <canvas id="caloriesChart"></canvas>
</div>

<script>
    document.addEventListener('DOMContentLoaded', (event) => {

        var ctx = document.getElementById('myChart');
        var ctx2 = document.getElementById('caloriesChart');

        const data = {
            labels: [
                'Proteins',
                'Carbs',
                'Fats',

            ],
            datasets: [{
                label: 'Eaten',
                data: [
    @Model.DailyProteins.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture),
    @Model.DailyCarbs.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture),
    @Model.DailyFats.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture),
                ],

                backgroundColor: [
                    'rgba(255, 99, 132, 0.7)',
                    'rgba(255, 99, 132, 0.7)',
                    'rgba(255, 99, 132, 0.7)'
                ],
                hoverOffset: 4
            },


            {
                label: 'Recommended',
                data: [
    @Model.Recommendation.Proteins.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture),
    @Model.Recommendation.Carbs.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture),
    @Model.Recommendation.Fats.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)],


                backgroundColor: [
                    'rgba(255, 159, 64, 0.7)',
                    'rgba(255, 159, 64, 0.7)',
                    'rgba(255, 159, 64, 0.7)'
                ],


                hoverOffset: 4
            }

            ]



        };
        const config = {
            type: 'bar',
            data: data,
        };


        const data2 = {
            labels: [

                'Calories'
            ],
            datasets: [{
                label: 'Eaten',
                data: [

    @Model.DailyCalories.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)],

                backgroundColor: [
                    'rgba(255, 99, 132,0.7)',

                ],
                hoverOffset: 4
            },


            {
                label: 'Recommended',
                data: [

    @Model.Recommendation.Calories.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)],


                backgroundColor: [

                    'rgba(255, 159, 64, 0.7)'
                ],


                hoverOffset: 4
            }

            ]

        };
        const config2 = {
            type: 'bar',
            data: data2,
        };

        var myChart = new Chart(ctx, config);
        var caloriesChart = new Chart(ctx2, config2);

    });
</script>